// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v1/management/enrollment.proto
// </auto-generated>
// Original file comments:
// sensory.api.management
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sensory.Api.V1.Management {
  /// <summary>
  /// Service to manage Enrollments in the database
  /// </summary>
  public static partial class EnrollmentService
  {
    static readonly string __ServiceName = "sensory.api.v1.management.EnrollmentService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.GetEnrollmentsRequest> __Marshaller_sensory_api_v1_management_GetEnrollmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.GetEnrollmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.GetEnrollmentsResponse> __Marshaller_sensory_api_v1_management_GetEnrollmentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.GetEnrollmentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse> __Marshaller_sensory_api_v1_management_GetEnrollmentGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest> __Marshaller_sensory_api_v1_management_CreateEnrollmentGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.EnrollmentGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest> __Marshaller_sensory_api_v1_management_AppendEnrollmentGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeleteEnrollmentRequest> __Marshaller_sensory_api_v1_management_DeleteEnrollmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeleteEnrollmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.EnrollmentResponse> __Marshaller_sensory_api_v1_management_EnrollmentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.EnrollmentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest> __Marshaller_sensory_api_v1_management_DeleteEnrollmentGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.UpdateEnrollmentRequest> __Marshaller_sensory_api_v1_management_UpdateEnrollmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.UpdateEnrollmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest> __Marshaller_sensory_api_v1_management_UpdateEnrollmentGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest> __Marshaller_sensory_api_v1_management_RemoveEnrollmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.GetEnrollmentsRequest, global::Sensory.Api.V1.Management.GetEnrollmentsResponse> __Method_GetEnrollments = new grpc::Method<global::Sensory.Api.V1.Management.GetEnrollmentsRequest, global::Sensory.Api.V1.Management.GetEnrollmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEnrollments",
        __Marshaller_sensory_api_v1_management_GetEnrollmentsRequest,
        __Marshaller_sensory_api_v1_management_GetEnrollmentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.GetEnrollmentsRequest, global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse> __Method_GetEnrollmentGroups = new grpc::Method<global::Sensory.Api.V1.Management.GetEnrollmentsRequest, global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEnrollmentGroups",
        __Marshaller_sensory_api_v1_management_GetEnrollmentsRequest,
        __Marshaller_sensory_api_v1_management_GetEnrollmentGroupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Method_CreateEnrollmentGroup = new grpc::Method<global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEnrollmentGroup",
        __Marshaller_sensory_api_v1_management_CreateEnrollmentGroupRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Method_AppendEnrollmentGroup = new grpc::Method<global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AppendEnrollmentGroup",
        __Marshaller_sensory_api_v1_management_AppendEnrollmentGroupRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.DeleteEnrollmentRequest, global::Sensory.Api.V1.Management.EnrollmentResponse> __Method_DeleteEnrollment = new grpc::Method<global::Sensory.Api.V1.Management.DeleteEnrollmentRequest, global::Sensory.Api.V1.Management.EnrollmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEnrollment",
        __Marshaller_sensory_api_v1_management_DeleteEnrollmentRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Method_DeleteEnrollmentGroup = new grpc::Method<global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEnrollmentGroup",
        __Marshaller_sensory_api_v1_management_DeleteEnrollmentGroupRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.UpdateEnrollmentRequest, global::Sensory.Api.V1.Management.EnrollmentResponse> __Method_UpdateEnrollment = new grpc::Method<global::Sensory.Api.V1.Management.UpdateEnrollmentRequest, global::Sensory.Api.V1.Management.EnrollmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEnrollment",
        __Marshaller_sensory_api_v1_management_UpdateEnrollmentRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Method_UpdateEnrollmentGroup = new grpc::Method<global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEnrollmentGroup",
        __Marshaller_sensory_api_v1_management_UpdateEnrollmentGroupRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse> __Method_RemoveEnrollmentsFromGroup = new grpc::Method<global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest, global::Sensory.Api.V1.Management.EnrollmentGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveEnrollmentsFromGroup",
        __Marshaller_sensory_api_v1_management_RemoveEnrollmentsRequest,
        __Marshaller_sensory_api_v1_management_EnrollmentGroupResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sensory.Api.V1.Management.EnrollmentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for EnrollmentService</summary>
    public partial class EnrollmentServiceClient : grpc::ClientBase<EnrollmentServiceClient>
    {
      /// <summary>Creates a new client for EnrollmentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EnrollmentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EnrollmentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EnrollmentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EnrollmentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EnrollmentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get enrollments from the database that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.GetEnrollmentsResponse GetEnrollments(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnrollments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get enrollments from the database that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.GetEnrollmentsResponse GetEnrollments(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEnrollments, null, options, request);
      }
      /// <summary>
      /// Get enrollments from the database that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.GetEnrollmentsResponse> GetEnrollmentsAsync(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnrollmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get enrollments from the database that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.GetEnrollmentsResponse> GetEnrollmentsAsync(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEnrollments, null, options, request);
      }
      /// <summary>
      /// Get all enrollment groups that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse GetEnrollmentGroups(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnrollmentGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all enrollment groups that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse GetEnrollmentGroups(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEnrollmentGroups, null, options, request);
      }
      /// <summary>
      /// Get all enrollment groups that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse> GetEnrollmentGroupsAsync(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnrollmentGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all enrollment groups that match the specified criteria
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.GetEnrollmentGroupsResponse> GetEnrollmentGroupsAsync(global::Sensory.Api.V1.Management.GetEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEnrollmentGroups, null, options, request);
      }
      /// <summary>
      /// Creates a new enrollment group without any associated enrollments
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse CreateEnrollmentGroup(global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEnrollmentGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new enrollment group without any associated enrollments
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse CreateEnrollmentGroup(global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Creates a new enrollment group without any associated enrollments
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> CreateEnrollmentGroupAsync(global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEnrollmentGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new enrollment group without any associated enrollments
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> CreateEnrollmentGroupAsync(global::Sensory.Api.V1.Management.CreateEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Appends an enrollment to an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse AppendEnrollmentGroup(global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendEnrollmentGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Appends an enrollment to an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse AppendEnrollmentGroup(global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AppendEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Appends an enrollment to an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> AppendEnrollmentGroupAsync(global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendEnrollmentGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Appends an enrollment to an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> AppendEnrollmentGroupAsync(global::Sensory.Api.V1.Management.AppendEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AppendEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Deletes an enrollment from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// A user may not delete their last enrollment, as this would lead to a situation where a user could
      /// lock themselves out of the system forever.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentResponse DeleteEnrollment(global::Sensory.Api.V1.Management.DeleteEnrollmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnrollment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an enrollment from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// A user may not delete their last enrollment, as this would lead to a situation where a user could
      /// lock themselves out of the system forever.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentResponse DeleteEnrollment(global::Sensory.Api.V1.Management.DeleteEnrollmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEnrollment, null, options, request);
      }
      /// <summary>
      /// Deletes an enrollment from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// A user may not delete their last enrollment, as this would lead to a situation where a user could
      /// lock themselves out of the system forever.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentResponse> DeleteEnrollmentAsync(global::Sensory.Api.V1.Management.DeleteEnrollmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnrollmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an enrollment from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// A user may not delete their last enrollment, as this would lead to a situation where a user could
      /// lock themselves out of the system forever.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentResponse> DeleteEnrollmentAsync(global::Sensory.Api.V1.Management.DeleteEnrollmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEnrollment, null, options, request);
      }
      /// <summary>
      /// Deletes an enrollment group from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse DeleteEnrollmentGroup(global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnrollmentGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an enrollment group from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse DeleteEnrollmentGroup(global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Deletes an enrollment group from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> DeleteEnrollmentGroupAsync(global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnrollmentGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an enrollment group from the database
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> DeleteEnrollmentGroupAsync(global::Sensory.Api.V1.Management.DeleteEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Updates the name of an enrollment
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentResponse UpdateEnrollment(global::Sensory.Api.V1.Management.UpdateEnrollmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnrollment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the name of an enrollment
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentResponse UpdateEnrollment(global::Sensory.Api.V1.Management.UpdateEnrollmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEnrollment, null, options, request);
      }
      /// <summary>
      /// Updates the name of an enrollment
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentResponse> UpdateEnrollmentAsync(global::Sensory.Api.V1.Management.UpdateEnrollmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnrollmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the name of an enrollment
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentResponse> UpdateEnrollmentAsync(global::Sensory.Api.V1.Management.UpdateEnrollmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEnrollment, null, options, request);
      }
      /// <summary>
      /// Updates the name of an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse UpdateEnrollmentGroup(global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnrollmentGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the name of an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse UpdateEnrollmentGroup(global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Updates the name of an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> UpdateEnrollmentGroupAsync(global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnrollmentGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the name of an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> UpdateEnrollmentGroupAsync(global::Sensory.Api.V1.Management.UpdateEnrollmentGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEnrollmentGroup, null, options, request);
      }
      /// <summary>
      /// Removes a list of enrollments from an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse RemoveEnrollmentsFromGroup(global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveEnrollmentsFromGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a list of enrollments from an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.EnrollmentGroupResponse RemoveEnrollmentsFromGroup(global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveEnrollmentsFromGroup, null, options, request);
      }
      /// <summary>
      /// Removes a list of enrollments from an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> RemoveEnrollmentsFromGroupAsync(global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveEnrollmentsFromGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a list of enrollments from an enrollment group
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.EnrollmentGroupResponse> RemoveEnrollmentsFromGroupAsync(global::Sensory.Api.V1.Management.RemoveEnrollmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveEnrollmentsFromGroup, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EnrollmentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EnrollmentServiceClient(configuration);
      }
    }

  }
}
#endregion
