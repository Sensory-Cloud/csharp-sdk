// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v1/management/device.proto
// </auto-generated>
// Original file comments:
// sensory.api.management
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sensory.Api.V1.Management {
  /// <summary>
  /// Service to manage Devices in the database
  /// </summary>
  public static partial class DeviceService
  {
    static readonly string __ServiceName = "sensory.api.v1.management.DeviceService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.EnrollDeviceRequest> __Marshaller_sensory_api_v1_management_EnrollDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.EnrollDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeviceResponse> __Marshaller_sensory_api_v1_management_DeviceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeviceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest> __Marshaller_sensory_api_v1_management_RenewDeviceCredentialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest> __Marshaller_sensory_api_v1_management_DeviceGetWhoAmIRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.GetDevicesRequest> __Marshaller_sensory_api_v1_management_GetDevicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.GetDevicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeviceListResponse> __Marshaller_sensory_api_v1_management_DeviceListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeviceListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.UpdateDeviceRequest> __Marshaller_sensory_api_v1_management_UpdateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.UpdateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Sensory.Api.V1.Management.DeleteDeviceRequest> __Marshaller_sensory_api_v1_management_DeleteDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Sensory.Api.V1.Management.DeleteDeviceRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.EnrollDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse> __Method_EnrollDevice = new grpc::Method<global::Sensory.Api.V1.Management.EnrollDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnrollDevice",
        __Marshaller_sensory_api_v1_management_EnrollDeviceRequest,
        __Marshaller_sensory_api_v1_management_DeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest, global::Sensory.Api.V1.Management.DeviceResponse> __Method_RenewDeviceCredential = new grpc::Method<global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest, global::Sensory.Api.V1.Management.DeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenewDeviceCredential",
        __Marshaller_sensory_api_v1_management_RenewDeviceCredentialRequest,
        __Marshaller_sensory_api_v1_management_DeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest, global::Sensory.Api.V1.Management.DeviceResponse> __Method_GetWhoAmI = new grpc::Method<global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest, global::Sensory.Api.V1.Management.DeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWhoAmI",
        __Marshaller_sensory_api_v1_management_DeviceGetWhoAmIRequest,
        __Marshaller_sensory_api_v1_management_DeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.GetDevicesRequest, global::Sensory.Api.V1.Management.DeviceListResponse> __Method_GetDevices = new grpc::Method<global::Sensory.Api.V1.Management.GetDevicesRequest, global::Sensory.Api.V1.Management.DeviceListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDevices",
        __Marshaller_sensory_api_v1_management_GetDevicesRequest,
        __Marshaller_sensory_api_v1_management_DeviceListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.UpdateDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse> __Method_UpdateDevice = new grpc::Method<global::Sensory.Api.V1.Management.UpdateDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDevice",
        __Marshaller_sensory_api_v1_management_UpdateDeviceRequest,
        __Marshaller_sensory_api_v1_management_DeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Sensory.Api.V1.Management.DeleteDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse> __Method_DeleteDevice = new grpc::Method<global::Sensory.Api.V1.Management.DeleteDeviceRequest, global::Sensory.Api.V1.Management.DeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDevice",
        __Marshaller_sensory_api_v1_management_DeleteDeviceRequest,
        __Marshaller_sensory_api_v1_management_DeviceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sensory.Api.V1.Management.DeviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for DeviceService</summary>
    public partial class DeviceServiceClient : grpc::ClientBase<DeviceServiceClient>
    {
      /// <summary>Creates a new client for DeviceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DeviceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeviceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DeviceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DeviceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DeviceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new device in the database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse EnrollDevice(global::Sensory.Api.V1.Management.EnrollDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnrollDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new device in the database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse EnrollDevice(global::Sensory.Api.V1.Management.EnrollDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnrollDevice, null, options, request);
      }
      /// <summary>
      /// Create a new device in the database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> EnrollDeviceAsync(global::Sensory.Api.V1.Management.EnrollDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnrollDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new device in the database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> EnrollDeviceAsync(global::Sensory.Api.V1.Management.EnrollDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnrollDevice, null, options, request);
      }
      /// <summary>
      /// Renew a device's credential, which links the device to a key in the database.
      /// This endpoint can be used to assign a new credential to a device if the old credential has expired.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse RenewDeviceCredential(global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewDeviceCredential(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Renew a device's credential, which links the device to a key in the database.
      /// This endpoint can be used to assign a new credential to a device if the old credential has expired.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse RenewDeviceCredential(global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenewDeviceCredential, null, options, request);
      }
      /// <summary>
      /// Renew a device's credential, which links the device to a key in the database.
      /// This endpoint can be used to assign a new credential to a device if the old credential has expired.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> RenewDeviceCredentialAsync(global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewDeviceCredentialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Renew a device's credential, which links the device to a key in the database.
      /// This endpoint can be used to assign a new credential to a device if the old credential has expired.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> RenewDeviceCredentialAsync(global::Sensory.Api.V1.Management.RenewDeviceCredentialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenewDeviceCredential, null, options, request);
      }
      /// <summary>
      /// Allows a device to fetch information about itself
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse GetWhoAmI(global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWhoAmI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows a device to fetch information about itself
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse GetWhoAmI(global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWhoAmI, null, options, request);
      }
      /// <summary>
      /// Allows a device to fetch information about itself
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> GetWhoAmIAsync(global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWhoAmIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows a device to fetch information about itself
      /// Authorization metadata is required {"authorization": "Bearer &lt;TOKEN>"}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> GetWhoAmIAsync(global::Sensory.Api.V1.Management.DeviceGetWhoAmIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWhoAmI, null, options, request);
      }
      /// <summary>
      /// Returns a list of devices associated with the given userId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceListResponse GetDevices(global::Sensory.Api.V1.Management.GetDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of devices associated with the given userId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceListResponse GetDevices(global::Sensory.Api.V1.Management.GetDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDevices, null, options, request);
      }
      /// <summary>
      /// Returns a list of devices associated with the given userId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceListResponse> GetDevicesAsync(global::Sensory.Api.V1.Management.GetDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of devices associated with the given userId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceListResponse> GetDevicesAsync(global::Sensory.Api.V1.Management.GetDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDevices, null, options, request);
      }
      /// <summary>
      /// Allows the name of a device to be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse UpdateDevice(global::Sensory.Api.V1.Management.UpdateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows the name of a device to be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse UpdateDevice(global::Sensory.Api.V1.Management.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      /// <summary>
      /// Allows the name of a device to be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> UpdateDeviceAsync(global::Sensory.Api.V1.Management.UpdateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows the name of a device to be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> UpdateDeviceAsync(global::Sensory.Api.V1.Management.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      /// <summary>
      /// Allows a device to be deleted
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse DeleteDevice(global::Sensory.Api.V1.Management.DeleteDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows a device to be deleted
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Sensory.Api.V1.Management.DeviceResponse DeleteDevice(global::Sensory.Api.V1.Management.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      /// <summary>
      /// Allows a device to be deleted
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> DeleteDeviceAsync(global::Sensory.Api.V1.Management.DeleteDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows a device to be deleted
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Sensory.Api.V1.Management.DeviceResponse> DeleteDeviceAsync(global::Sensory.Api.V1.Management.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DeviceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeviceServiceClient(configuration);
      }
    }

  }
}
#endregion
